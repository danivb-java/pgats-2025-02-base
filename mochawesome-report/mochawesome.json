{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 4,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-17T16:08:37.399Z",
    "end": "2025-09-17T16:08:37.651Z",
    "duration": 252,
    "testsRegistered": 4,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "369f8e44-23f6-4b31-8cfe-ab88b2a952dd",
      "title": "",
      "fullFile": "C:\\DANI\\Pos_AutomacaoTestes\\7-AutomacaoTestesAPI\\pgats-2025-02-base\\test\\graphql\\external\\checkoutExternal.test.js",
      "file": "\\test\\graphql\\external\\checkoutExternal.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0fbbec66-ffbe-4f3a-a0b5-e64635cf3a6c",
          "title": "Testes de Checkout e Pagamento de produtos",
          "fullFile": "C:\\DANI\\Pos_AutomacaoTestes\\7-AutomacaoTestesAPI\\pgats-2025-02-base\\test\\graphql\\external\\checkoutExternal.test.js",
          "file": "\\test\\graphql\\external\\checkoutExternal.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testes de Checkout e Pagamento de produtos\"",
              "fullTitle": "Testes de Checkout e Pagamento de produtos \"before all\" hook in \"Testes de Checkout e Pagamento de produtos\"",
              "timedOut": false,
              "duration": 128,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const loginUser = require('../fixture/requisicoes/login/loginUser.json');\nconst resposta = await request('http://localhost:4000')\n    .post('/graphql')\n    .send(loginUser);\ntoken = resposta.body.data.login.token;",
              "err": {},
              "uuid": "8d109043-a194-415d-9df8-8fe4d7e75060",
              "parentUUID": "0fbbec66-ffbe-4f3a-a0b5-e64635cf3a6c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "Validar sucesso de pagamento com boleto",
              "fullTitle": "Testes de Checkout e Pagamento de produtos Validar sucesso de pagamento com boleto",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqBoleto = require('../fixture/requisicoes/checkout/createPagtoWithBoleto.json');\nconst respostaSucessoBoleto = await request('http://localhost:4000')\n    .post('/graphql')\n    .set('Authorization', `Bearer ${token}`)\n    .send(reqBoleto);\nexpect(respostaSucessoBoleto.status).to.equal(200);\nexpect(respostaSucessoBoleto.body).to.have.property('data');\nexpect(respostaSucessoBoleto.body.data.checkout).to.include({ paymentMethod: 'boleto' });",
              "err": {},
              "uuid": "612ecfed-c6f6-4dab-9c8d-efc28b3d6305",
              "parentUUID": "0fbbec66-ffbe-4f3a-a0b5-e64635cf3a6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validar sucesso de pagamento com cartão",
              "fullTitle": "Testes de Checkout e Pagamento de produtos Validar sucesso de pagamento com cartão",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const reqCartao = require('../fixture/requisicoes/checkout/createPagtoWithCartao.json');\nconst respostaSucessoCartao = await request('http://localhost:4000')\n    .post('/graphql')\n    .set('Authorization', `Bearer ${token}`)\n    .send(reqCartao);\nexpect(respostaSucessoCartao.status).to.equal(200);\nexpect(respostaSucessoCartao.body).to.have.property('data');\nexpect(respostaSucessoCartao.body.data.checkout).to.include({ paymentMethod: 'credit_card' });\nconst respostaEsperada = require('../fixture/respostas/pagamentos/validarPagamentoComCartao.json');\nexpect(respostaSucessoCartao.body.data.checkout).to.deep.equal(respostaEsperada.data.checkout);",
              "err": {},
              "uuid": "a84a3c46-85e9-47ae-88c6-16bc4731f658",
              "parentUUID": "0fbbec66-ffbe-4f3a-a0b5-e64635cf3a6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testando a regra relacionada a Email já cadastrado",
              "fullTitle": "Testes de Checkout e Pagamento de produtos Testando a regra relacionada a Email já cadastrado",
              "timedOut": false,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const respostaCheckout = await request('http://localhost:4000')\n    .post('/graphql')\n    .set('Authorization', `Bearer ${token}`)\n    .send(teste.createCheckout);\nexpect(respostaCheckout.status).to.equal(200);\nexpect(respostaCheckout.body.errors[0].message).to.equal(teste.mensagemEsperada);",
              "err": {},
              "uuid": "8b5bbcc0-3506-4728-b347-8df3e44ad7a5",
              "parentUUID": "0fbbec66-ffbe-4f3a-a0b5-e64635cf3a6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Testando a regra relacionada a Credenciais inválidas",
              "fullTitle": "Testes de Checkout e Pagamento de produtos Testando a regra relacionada a Credenciais inválidas",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const respostaCheckout = await request('http://localhost:4000')\n    .post('/graphql')\n    .set('Authorization', `Bearer ${token}`)\n    .send(teste.createCheckout);\nexpect(respostaCheckout.status).to.equal(200);\nexpect(respostaCheckout.body.errors[0].message).to.equal(teste.mensagemEsperada);",
              "err": {},
              "uuid": "eda7c59c-d400-4d09-941c-3ba16ee004bc",
              "parentUUID": "0fbbec66-ffbe-4f3a-a0b5-e64635cf3a6c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "612ecfed-c6f6-4dab-9c8d-efc28b3d6305",
            "a84a3c46-85e9-47ae-88c6-16bc4731f658",
            "8b5bbcc0-3506-4728-b347-8df3e44ad7a5",
            "eda7c59c-d400-4d09-941c-3ba16ee004bc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 86,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": null,
      "version": "6.3.0"
    }
  }
}